{"version":3,"file":"static/js/2938.ad597714.chunk.js","mappings":"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","sources":["../node_modules/@safe-global/safe-apps-sdk/src/version.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/utils.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/messageFormatter.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/methods.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/constants.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts","../node_modules/viem/utils/signature/hashMessage.ts","../node_modules/viem/utils/signature/toPrefixedMessage.ts","../node_modules/viem/constants/strings.ts","../node_modules/viem/errors/typedData.ts","../node_modules/viem/utils/typedData.ts","../node_modules/viem/utils/signature/hashTypedData.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/signatures.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/permissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/wallet/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/decorators/requirePermissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/index.ts"],"sourcesContent":["export const getSDKVersion = () => '9.1.0';\n","// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, '0');\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join('');\n};\n\nconst generateRequestId = (): string => {\n  if (typeof window !== 'undefined') {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n\nexport { generateRequestId };\n","import { ErrorResponse, SDKRequestData, RequestId, SuccessResponse, MethodToResponse } from '../types/index.js';\nimport { getSDKVersion } from '../version.js';\nimport { Methods } from './methods.js';\nimport { generateRequestId } from './utils.js';\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(method: M, params: P): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (id: RequestId, data: MethodToResponse[Methods], version: string): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (id: RequestId, error: string, version: string): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","export enum Methods {\n  sendTransactions = 'sendTransactions',\n  rpcCall = 'rpcCall',\n  getChainInfo = 'getChainInfo',\n  getSafeInfo = 'getSafeInfo',\n  getTxBySafeTxHash = 'getTxBySafeTxHash',\n  getSafeBalances = 'getSafeBalances',\n  signMessage = 'signMessage',\n  signTypedMessage = 'signTypedMessage',\n  getEnvironmentInfo = 'getEnvironmentInfo',\n  getOffChainSignature = 'getOffChainSignature',\n  requestAddressBook = 'requestAddressBook',\n  wallet_getPermissions = 'wallet_getPermissions',\n  wallet_requestPermissions = 'wallet_requestPermissions',\n}\n\nexport enum RestrictedMethods {\n  requestAddressBook = 'requestAddressBook',\n}\n","import { MessageFormatter } from './messageFormatter.js';\nimport { Methods } from './methods.js';\nimport { InterfaceMessageEvent, Communicator, Response, SuccessResponse } from '../types/index.js';\n\n// eslint-disable-next-line\ntype Callback = (response: any) => void;\n\nclass PostMessageCommunicator implements Communicator {\n  private readonly allowedOrigins: RegExp[] | null = null;\n  private callbacks = new Map<string, Callback>();\n  private debugMode = false;\n  private isServer = typeof window === 'undefined';\n\n  constructor(allowedOrigins: RegExp[] | null = null, debugMode = false) {\n    this.allowedOrigins = allowedOrigins;\n    this.debugMode = debugMode;\n\n    if (!this.isServer) {\n      window.addEventListener('message', this.onParentMessage);\n    }\n  }\n\n  private isValidMessage = ({ origin, data, source }: InterfaceMessageEvent): boolean => {\n    const emptyOrMalformed = !data;\n    const sentFromParentEl = !this.isServer && source === window.parent;\n    const majorVersionNumber = typeof data.version !== 'undefined' && parseInt(data.version.split('.')[0]);\n    const allowedSDKVersion = typeof majorVersionNumber === 'number' && majorVersionNumber >= 1;\n    let validOrigin = true;\n    if (Array.isArray(this.allowedOrigins)) {\n      validOrigin = this.allowedOrigins.find((regExp) => regExp.test(origin)) !== undefined;\n    }\n\n    return !emptyOrMalformed && sentFromParentEl && allowedSDKVersion && validOrigin;\n  };\n\n  private logIncomingMessage = (msg: InterfaceMessageEvent): void => {\n    console.info(`Safe Apps SDK v1: A message was received from origin ${msg.origin}. `, msg.data);\n  };\n\n  private onParentMessage = (msg: InterfaceMessageEvent): void => {\n    if (this.isValidMessage(msg)) {\n      this.debugMode && this.logIncomingMessage(msg);\n      this.handleIncomingMessage(msg.data);\n    }\n  };\n\n  private handleIncomingMessage = (payload: InterfaceMessageEvent['data']): void => {\n    const { id } = payload;\n\n    const cb = this.callbacks.get(id);\n    if (cb) {\n      cb(payload);\n\n      this.callbacks.delete(id);\n    }\n  };\n\n  public send = <M extends Methods, P, R>(method: M, params: P): Promise<SuccessResponse<R>> => {\n    const request = MessageFormatter.makeRequest(method, params);\n\n    if (this.isServer) {\n      throw new Error(\"Window doesn't exist\");\n    }\n\n    window.parent.postMessage(request, '*');\n    return new Promise((resolve, reject) => {\n      this.callbacks.set(request.id, (response: Response<R>) => {\n        if (!response.success) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nexport default PostMessageCommunicator;\nexport * from './methods.js';\n","import { ChainInfo as _ChainInfo } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type ChainInfo = Pick<\n  _ChainInfo,\n  'chainName' | 'chainId' | 'shortName' | 'nativeCurrency' | 'blockExplorerUriTemplate'\n>;\n\nexport { NativeCurrency } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type BaseTransaction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type GetTxBySafeTxHashParams = {\n  safeTxHash: string;\n};\n\nexport interface SendTransactionRequestParams {\n  safeTxGas?: number;\n}\n\nexport interface SendTransactionsParams {\n  txs: BaseTransaction[];\n  params?: SendTransactionRequestParams;\n}\n\nexport type GetBalanceParams = { currency?: string };\n\nexport type SignMessageParams = {\n  message: string;\n};\n\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: string | number | bigint | { toNumber: () => number };\n  verifyingContract?: string;\n  salt?: string;\n}\n\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\n\nexport type TypedMessageTypes = { [key: string]: TypedDataTypes[] };\n\nexport type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n  primaryType?: string;\n};\n\nexport type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\n\nexport type SendTransactionsResponse = {\n  safeTxHash: string;\n};\n\nexport type OffChainSignMessageResponse = {\n  messageHash: string;\n};\n\nexport type SignMessageResponse = SendTransactionsResponse | OffChainSignMessageResponse;\n\nexport type SafeInfo = {\n  safeAddress: string;\n  chainId: number;\n  threshold: number;\n  owners: string[];\n  isReadOnly: boolean;\n};\n\nexport type SafeInfoExtended = SafeInfo & {\n  nonce: number;\n  implementation: string;\n  modules: string[] | null;\n  fallbackHandler: string | null;\n  guard: string | null;\n  version: string | null;\n};\n\nexport type EnvironmentInfo = {\n  origin: string;\n};\n\nexport type PostMessageOptions = {\n  transfer?: any[];\n};\n\nexport type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\n\nexport const isObjectEIP712TypedData = (obj?: unknown): obj is EIP712TypedData => {\n  return typeof obj === 'object' && obj != null && 'domain' in obj && 'types' in obj && 'message' in obj;\n};\n","import { Methods } from '../communication/methods.js';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n  SignMessageResponse,\n} from '../types/index.js';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SignMessageResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SignMessageResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SignMessageResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SignMessageResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n","export const RPC_CALLS = {\n  eth_call: 'eth_call',\n  eth_gasPrice: 'eth_gasPrice',\n  eth_getLogs: 'eth_getLogs',\n  eth_getBalance: 'eth_getBalance',\n  eth_getCode: 'eth_getCode',\n  eth_getBlockByHash: 'eth_getBlockByHash',\n  eth_getBlockByNumber: 'eth_getBlockByNumber',\n  eth_getStorageAt: 'eth_getStorageAt',\n  eth_getTransactionByHash: 'eth_getTransactionByHash',\n  eth_getTransactionReceipt: 'eth_getTransactionReceipt',\n  eth_getTransactionCount: 'eth_getTransactionCount',\n  eth_estimateGas: 'eth_estimateGas',\n  safe_setSettings: 'safe_setSettings',\n} as const;\n","import { RPC_CALLS } from '../eth/constants.js';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n  SafeSettings,\n} from '../types/index.js';\nimport { Methods } from '../communication/methods.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n  public setSafeSettings;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n    this.setSafeSettings = this.buildRequest<[SafeSettings], SafeSettings>({\n      call: RPC_CALLS.safe_setSettings,\n    });\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { toPrefixedMessage } from './toPrefixedMessage.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessageReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType = Keccak256ErrorType | ErrorType\n\nexport function hashMessage<to extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: to | undefined,\n): HashMessageReturnType<to> {\n  return keccak256(toPrefixedMessage(message), to_)\n}\n","import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { size } from '../data/size.js'\nimport {\n  type BytesToHexErrorType,\n  type StringToHexErrorType,\n  bytesToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type ToPrefixedMessageErrorType =\n  | ConcatErrorType\n  | StringToHexErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\nexport function toPrefixedMessage(message_: SignableMessage): Hex {\n  const message = (() => {\n    if (typeof message_ === 'string') return stringToHex(message_)\n    if (typeof message_.raw === 'string') return message_.raw\n    return bytesToHex(message_.raw)\n  })()\n  const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`)\n  return concat([prefix, message])\n}\n","export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n'\n","import type { TypedData } from 'abitype'\n\nimport { stringify } from '../utils/stringify.js'\nimport { BaseError } from './base.js'\n\nexport type InvalidDomainErrorType = InvalidDomainError & {\n  name: 'InvalidDomainError'\n}\nexport class InvalidDomainError extends BaseError {\n  constructor({ domain }: { domain: unknown }) {\n    super(`Invalid domain \"${stringify(domain)}\".`, {\n      metaMessages: ['Must be a valid EIP-712 domain.'],\n    })\n  }\n}\n\nexport type InvalidPrimaryTypeErrorType = InvalidPrimaryTypeError & {\n  name: 'InvalidPrimaryTypeError'\n}\nexport class InvalidPrimaryTypeError extends BaseError {\n  constructor({\n    primaryType,\n    types,\n  }: { primaryType: string; types: TypedData | Record<string, unknown> }) {\n    super(\n      `Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`,\n      {\n        docsPath: '/api/glossary/Errors#typeddatainvalidprimarytypeerror',\n        metaMessages: ['Check that the primary type is a key in `types`.'],\n      },\n    )\n  }\n}\n\nexport type InvalidStructTypeErrorType = InvalidStructTypeError & {\n  name: 'InvalidStructTypeError'\n}\nexport class InvalidStructTypeError extends BaseError {\n  constructor({ type }: { type: string }) {\n    super(`Struct type \"${type}\" is invalid.`, {\n      metaMessages: ['Struct type must not be a Solidity type.'],\n      name: 'InvalidStructTypeError',\n    })\n  }\n}\n","import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport {\n  InvalidDomainError,\n  InvalidPrimaryTypeError,\n  InvalidStructTypeError,\n} from '../errors/typedData.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\nimport { stringify } from './stringify.js'\n\nexport type SerializeTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function serializeTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = parameters as unknown as TypedDataDefinition\n\n  const normalizeData = (\n    struct: readonly TypedDataParameter[],\n    data_: Record<string, unknown>,\n  ) => {\n    const data = { ...data_ }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!types.EIP712Domain) return {}\n    if (!domain_) return {}\n    return normalizeData(types.EIP712Domain, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return stringify({ domain, message, primaryType, types })\n}\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) {\n        validateReference(type)\n        validateData(struct, value as Record<string, unknown>)\n      }\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({ domain })\n    validateData(types.EIP712Domain, domain)\n  }\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message)\n    else throw new InvalidPrimaryTypeError({ primaryType, types })\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    (typeof domain?.chainId === 'number' ||\n      typeof domain?.chainId === 'bigint') && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n\n/** @internal */\nfunction validateReference(type: string) {\n  // Struct type must not be a Solidity type.\n  if (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'string' ||\n    type.startsWith('bytes') ||\n    type.startsWith('uint') ||\n    type.startsWith('int')\n  )\n    throw new InvalidStructTypeError({ type })\n}\n","// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: HashTypedDataParameters<typedData, primaryType>,\n): HashTypedDataReturnType {\n  const {\n    domain = {},\n    message,\n    primaryType,\n  } = parameters as HashTypedDataParameters\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\nexport type HashStructErrorType =\n  | EncodeDataErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nexport function hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nexport function encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, readonly MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, readonly MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n","const MAGIC_VALUE = '0x1626ba7e';\nconst MAGIC_VALUE_BYTES = '0x20c13b0b';\n\nexport { MAGIC_VALUE, MAGIC_VALUE_BYTES };\n","export type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\n\nexport type PermissionRequest = {\n  [method: string]: Record<string, unknown>;\n};\n\nexport type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\n\nexport const PERMISSIONS_REQUEST_REJECTED = 4001;\n\nexport class PermissionsError extends Error {\n  public code: number;\n  public data?: unknown;\n\n  constructor(message: string, code: number, data?: unknown) {\n    super(message);\n\n    this.code = code;\n    this.data = data;\n\n    // Should adjust prototype manually because how TS handles the type extension compilation\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, PermissionsError.prototype);\n  }\n}\n","import { Methods, RestrictedMethods } from '../communication/methods.js';\nimport { Communicator } from '../types/index.js';\nimport { PermissionRequest, Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nclass Wallet {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getPermissions(): Promise<Permission[]> {\n    const response = await this.communicator.send<Methods.wallet_getPermissions, undefined, Permission[]>(\n      Methods.wallet_getPermissions,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async requestPermissions(permissions: PermissionRequest[]): Promise<Permission[]> {\n    if (!this.isPermissionRequestValid(permissions)) {\n      throw new PermissionsError('Permissions request is invalid', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    try {\n      const response = await this.communicator.send<\n        Methods.wallet_requestPermissions,\n        PermissionRequest[],\n        Permission[]\n      >(Methods.wallet_requestPermissions, permissions);\n\n      return response.data;\n    } catch {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n  }\n\n  isPermissionRequestValid(permissions: PermissionRequest[]): boolean {\n    return permissions.every((pr: PermissionRequest) => {\n      if (typeof pr === 'object') {\n        return Object.keys(pr).every((method) => {\n          if (Object.values(RestrictedMethods).includes(method as RestrictedMethods)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      return false;\n    });\n  }\n}\n\nexport { Wallet };\n","import { Methods } from '../communication/index.js';\nimport { Safe } from '../safe/index.js';\nimport { Wallet } from '../wallet/index.js';\n\nimport { Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nconst hasPermission = (required: Methods, permissions: Permission[]): boolean =>\n  permissions.some((permission) => permission.parentCapability === required);\n\nconst requirePermission = () => (_: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet((this as Safe).communicator);\n\n    let currentPermissions = await wallet.getPermissions();\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{ [propertyKey as Methods]: {} }]);\n    }\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    return originalMethod.apply(this);\n  };\n\n  return descriptor;\n};\n\nexport default requirePermission;\n","import { encodeFunctionData, Address, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures.js';\nimport { Methods } from '../communication/methods.js';\nimport { RPC_CALLS } from '../eth/constants.js';\nimport {\n  Communicator,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n  SafeInfoExtended,\n} from '../types/index.js';\nimport requirePermission from '../decorators/requirePermissions.js';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfoExtended> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfoExtended>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_dataHash',\n              type: 'bytes32',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_data',\n              type: 'bytes',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    const chainId =\n      typeof typedMessage.domain.chainId === 'object'\n        ? typedMessage.domain.chainId.toNumber()\n        : Number(typedMessage.domain.chainId);\n\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter((typeName) =>\n        fields.every((dataTypes) => dataTypes.every(({ type }) => type.replace('[', '').replace(']', '') !== typeName)),\n      );\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract as Address,\n        salt: typedMessage.domain.salt as Address,\n      },\n      types: typedMessage.types,\n      primaryType,\n    });\n  }\n\n  async getOffChainSignature(messageHash: string): Promise<string> {\n    const response = await this.communicator.send<Methods.getOffChainSignature, string, string>(\n      Methods.getOffChainSignature,\n      messageHash,\n    );\n\n    return response.data;\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n","import { Communicator } from './types/index.js';\nimport InterfaceCommunicator from './communication/index.js';\nimport { TXs } from './txs/index.js';\nimport { Eth } from './eth/index.js';\nimport { Safe } from './safe/index.js';\nimport { Wallet } from './wallet/index.js';\n\nexport type Opts = {\n  allowedDomains?: RegExp[];\n  debug?: boolean;\n};\n\nclass SafeAppsSDK {\n  private readonly communicator: Communicator;\n  public readonly eth: Eth;\n  public readonly txs: TXs;\n  public readonly safe: Safe;\n  public readonly wallet: Wallet;\n\n  constructor(opts: Opts = {}) {\n    const { allowedDomains = null, debug = false } = opts;\n\n    this.communicator = new InterfaceCommunicator(allowedDomains, debug);\n    this.eth = new Eth(this.communicator);\n    this.txs = new TXs(this.communicator);\n    this.safe = new Safe(this.communicator);\n    this.wallet = new Wallet(this.communicator);\n  }\n}\n\nexport default SafeAppsSDK;\n","import SDK from './sdk.js';\n\nexport default SDK;\nexport * from './sdk.js';\nexport * from './types/index.js';\nexport * from './communication/methods.js';\nexport * from './communication/messageFormatter.js';\nexport { getSDKVersion } from './version.js';\nexport * from './eth/constants.js';\n"],"names":["dec2hex","dec","toString","padStart","generateRequestId","window","len","arr","Uint8Array","crypto","getRandomValues","Array","from","join","generateId","Date","getTime","MessageFormatter","Methods","RestrictedMethods","makeRequest","method","params","id","env","sdkVersion","makeResponse","data","version","success","makeErrorResponse","error","constructor","allowedOrigins","arguments","length","undefined","debugMode","callbacks","Map","isServer","isValidMessage","_ref","origin","source","emptyOrMalformed","sentFromParentEl","this","parent","majorVersionNumber","parseInt","split","allowedSDKVersion","validOrigin","isArray","find","regExp","test","logIncomingMessage","msg","console","info","concat","onParentMessage","handleIncomingMessage","payload","cb","get","delete","send","request","Error","postMessage","Promise","resolve","reject","set","response","addEventListener","isObjectEIP712TypedData","obj","TXs","communicator","getBySafeTxHash","safeTxHash","getTxBySafeTxHash","signMessage","message","messagePayload","signTypedMessage","typedData","txs","sendTransactions","RPC_CALLS","inputFormatters","defaultBlockParam","returnFullTxObjectParam","blockNumberToHex","arg","Number","isInteger","Eth","call","buildRequest","formatters","getBalance","getCode","getStorageAt","getPastLogs","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionReceipt","getTransactionCount","getGasPrice","getEstimateGas","transaction","setSafeSettings","args","async","forEach","formatter","i","rpcCall","hashMessage","to_","keccak256","message_","stringToHex","raw","bytesToHex","prefix","size","toPrefixedMessage","InvalidDomainError","BaseError","domain","super","stringify","metaMessages","InvalidPrimaryTypeError","_ref2","primaryType","types","JSON","Object","keys","docsPath","InvalidStructTypeError","_ref3","type","name","getTypesForEIP712Domain","chainId","verifyingContract","salt","filter","Boolean","validateReference","startsWith","hashTypedData","parameters","_objectSpread","EIP712Domain","validateData","struct","param","value","integerMatch","match","integerRegex","_type","base","size_","numberToHex","signed","isAddress","InvalidAddressError","address","bytesMatch","bytesRegex","BytesSizeMismatchError","expectedSize","givenSize","validateTypedData","parts","push","hashStruct","hashDomain","encoded","encodeData","encodedTypes","encodedValues","hashType","field","encodeField","encodeAbiParameters","_ref4","encodedHashType","toHex","_ref5","result","unsortedDeps","findTypeDependencies","deps","sort","map","_ref6","t","encodeType","_ref7","primaryType_","results","Set","has","add","_ref8","prepend","slice","lastIndexOf","parsedType","typeValuePairs","item","_ref9","_ref0","v","PERMISSIONS_REQUEST_REJECTED","PermissionsError","code","setPrototypeOf","prototype","Wallet","getPermissions","wallet_getPermissions","requestPermissions","permissions","isPermissionRequestValid","wallet_requestPermissions","_unused","every","pr","values","includes","hasPermission","required","some","permission","parentCapability","requirePermission","_","propertyKey","descriptor","originalMethod","wallet","currentPermissions","apply","Safe","getChainInfo","getInfo","getSafeInfo","experimental_getBalances","currency","getSafeBalances","check1271Signature","messageHash","signature","safeInfo","encodedIsValidSignatureCall","encodeFunctionData","abi","constant","inputs","outputs","payable","stateMutability","functionName","to","safeAddress","toLowerCase","err","check1271SignatureBytes","calculateMessageHash","calculateTypedMessageHash","typedMessage","toNumber","fields","primaryTypes","typeName","dataTypes","replace","getOffChainSignature","isMessageSigned","check","isMessageHashSigned","checks","bind","getEnvironmentInfo","requestAddressBook","__decorate","opts","allowedDomains","debug","InterfaceCommunicator","eth","safe"],"sourceRoot":""}